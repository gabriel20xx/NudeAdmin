<% layout('partials/layout') %>
<section class="panel">
  <h1 class="panel-title">Dashboard</h1>
  <div class="panel-body">
    <div class="toolbar" style="margin-bottom:.75rem;">
      <input type="text" id="dashFilter" class="auth-input" placeholder="Filter by user or key..." style="min-width:260px;" />
  <span class="ui-select-wrapper"><select id="dashPeriod" class="ui-select">
        <option value="7d">Last 7 days</option>
        <option value="30d">Last 30 days</option>
        <option value="all">All time</option>
  </select></span>
      <label style="display:inline-flex; align-items:center; gap:.35rem;">
        <input type="checkbox" id="dashAutoRefresh" class="ui-checkbox" checked /> Auto refresh
      </label>
      <button id="dashRefresh" class="btn-ghost btn-refresh" type="button" title="Manual refresh"><i class="fa fa-rotate-right"></i><span class="hide-xs">Refresh</span></button>
    </div>
    <style>
      .tiles-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:12px}
      .tile{background:var(--panel-bg,#0b0b0b);border:1px solid var(--panel-border,#2a2a2a);border-radius:12px;padding:14px;display:flex;flex-direction:column;gap:8px}
      .tile-title{font-size:.9rem;color:var(--text-muted,#a8a8a8);font-weight:600}
      .tile-number{font-size:2.25rem;line-height:1.1;font-weight:800;letter-spacing:.2px}
      .tile-sub{font-size:.82rem;color:var(--text-muted,#9a9a9a);overflow:hidden;text-overflow:ellipsis;white-space:nowrap}
      .tile-row{display:flex;align-items:center;justify-content:space-between;gap:8px}
      .tile-media{position:relative;aspect-ratio:16/9;border-radius:8px;overflow:hidden;background:#0f0f0f;border:1px solid var(--panel-border,#2a2a2a);cursor:pointer}
      .tile-media img{width:100%;height:100%;object-fit:contain;display:block;background:#000}
      .dash-img-overlay{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,.82);z-index:5000;padding:2rem;backdrop-filter:blur(4px)}
      .dash-img-frame{max-width:90vw;max-height:90vh;position:relative;display:flex;align-items:center;justify-content:center}
      .dash-img-frame img{max-width:100%;max-height:100%;object-fit:contain;box-shadow:0 0 0 1px #333,0 4px 28px rgba(0,0,0,.6);border-radius:8px}
      .dash-img-close{position:absolute;top:-38px;right:0;background:#111;border:1px solid #333;color:#eee;padding:6px 10px;border-radius:6px;cursor:pointer;font-size:.8rem;display:inline-flex;align-items:center;gap:.35rem}
      .dash-img-meta{position:absolute;left:0;bottom:-34px;font-size:.75rem;color:#ddd;background:rgba(0,0,0,.55);padding:4px 8px;border-radius:4px;max-width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
      @media (max-width: 680px){ .dash-img-close{top:8px;right:8px} .dash-img-meta{bottom:8px;left:8px;right:8px} }
    </style>

    <!-- Totals: title + big number tiles -->
    <div class="tiles-grid">
      <div class="tile"><div class="tile-title">Total registered users</div><div class="tile-number" id="statUsers">—</div></div>
      <div class="tile"><div class="tile-title">Total generated media</div><div class="tile-number" id="statGenerated">—</div></div>
      <div class="tile"><div class="tile-title">Total viewed media (NudeFlow)</div><div class="tile-number" id="statViewed">—</div></div>
      <div class="tile"><div class="tile-title">Total downloads</div><div class="tile-number" id="statDownloads">—</div></div>
    </div>

    <!-- Leaders: either title + big number, or title + image + number -->
    <div class="tiles-grid" style="margin-top:16px;grid-template-columns:repeat(auto-fit,minmax(260px,1fr))">
      <!-- Top user: title + number (and small subtitle for name) -->
      <div class="tile">
        <div class="tile-title">Top user (generations)</div>
        <div class="tile-number" id="tileTopUserNumber">—</div>
        <div class="tile-sub" id="tileTopUserSub">—</div>
      </div>

      <!-- Media leaders with image + number -->
      <div class="tile">
        <div class="tile-title">Most viewed</div>
        <div class="tile-media"><img id="imgMostViews" alt="Most viewed preview"></div>
        <div class="tile-row"><div class="tile-sub" id="titleMostViews">—</div><div class="tile-number" id="numMostViews">—</div></div>
      </div>
      <div class="tile">
        <div class="tile-title">Most liked</div>
        <div class="tile-media"><img id="imgMostLikes" alt="Most liked preview"></div>
        <div class="tile-row"><div class="tile-sub" id="titleMostLikes">—</div><div class="tile-number" id="numMostLikes">—</div></div>
      </div>
      <div class="tile">
        <div class="tile-title">Most saved</div>
        <div class="tile-media"><img id="imgMostSaves" alt="Most saved preview"></div>
        <div class="tile-row"><div class="tile-sub" id="titleMostSaves">—</div><div class="tile-number" id="numMostSaves">—</div></div>
      </div>
      <div class="tile">
        <div class="tile-title">Most downloaded</div>
        <div class="tile-media"><img id="imgMostDownloads" alt="Most downloaded preview"></div>
        <div class="tile-row"><div class="tile-sub" id="titleMostDownloads">—</div><div class="tile-number" id="numMostDownloads">—</div></div>
      </div>
      <!-- Generation time metrics -->
      <div class="tile">
        <div class="tile-title">Avg generation time</div>
        <div class="tile-number" id="avgGenTime">—</div>
        <div class="tile-sub">in the selected period</div>
      </div>
      <div class="tile">
        <div class="tile-title">Fastest generation</div>
        <div class="tile-media"><img id="imgFastest" alt="Fastest generation preview"></div>
        <div class="tile-row"><div class="tile-sub" id="titleFastest">—</div><div class="tile-number" id="numFastest">—</div></div>
      </div>
      <div class="tile">
        <div class="tile-title">Slowest generation</div>
        <div class="tile-media"><img id="imgSlowest" alt="Slowest generation preview"></div>
        <div class="tile-row"><div class="tile-sub" id="titleSlowest">—</div><div class="tile-number" id="numSlowest">—</div></div>
      </div>
      <!-- Conversion rates -->
      <div class="tile">
        <div class="tile-title">Like conversion</div>
        <div class="tile-number" id="rateLike">—</div>
        <div class="tile-sub">likes per view</div>
      </div>
      <div class="tile">
        <div class="tile-title">Save conversion</div>
        <div class="tile-number" id="rateSave">—</div>
        <div class="tile-sub">saves per view</div>
      </div>
      <div class="tile">
        <div class="tile-title">Download conversion</div>
        <div class="tile-number" id="rateDownload">—</div>
        <div class="tile-sub">downloads per view</div>
      </div>
    </div>
    <div id="dashOverlay" class="refresh-overlay" aria-hidden="true" hidden>
      <div class="loader" role="status" aria-label="Loading"></div>
      <div class="status-text">Loading…</div>
    </div>
    <div id="dashLive" class="visually-hidden" aria-live="polite" aria-atomic="true"></div>
  </div>
</section>
<div id="dashImageOverlay" class="dash-img-overlay" hidden aria-hidden="true" role="dialog" aria-label="Media preview">
  <div class="dash-img-frame">
    <button type="button" class="dash-img-close" id="dashImgClose"><i class="fa fa-times"></i> Close</button>
    <img id="dashImgFull" alt="Full preview" />
    <div id="dashImgMeta" class="dash-img-meta"></div>
  </div>
</div>
<script>
  (async function(){
    // Hoisted early DOM refs & overlay/live helpers to avoid TDZ errors when loadStats runs before their declaration
    const overlay = document.getElementById('dashOverlay');
    const live = document.getElementById('dashLive');
    let overlayTimer;
    function showOverlaySoon(){
      clearTimeout(overlayTimer);
      overlayTimer = setTimeout(()=>{
        if(!overlay) return;
        overlay.removeAttribute('hidden');
        overlay.classList.add('active');
        overlay.setAttribute('aria-hidden','false');
        console.info('[ACTION] dashboard_refresh_overlay_show');
      },120);
    }
    function hideOverlay(){
      clearTimeout(overlayTimer);
      if(!overlay) return;
      overlay.classList.remove('active');
      overlay.setAttribute('aria-hidden','true');
      overlay.setAttribute('hidden','');
      console.info('[ACTION] dashboard_refresh_overlay_hide');
    }
    function announcePending(){ if(live) live.textContent = 'Loading dashboard stats…'; }
    function announceComplete(){ if(live) live.textContent = 'Dashboard stats updated at '+ new Date().toLocaleTimeString(); }
    function announceError(){ if(live) live.textContent = 'Dashboard load failed at '+ new Date().toLocaleTimeString(); }
    const encodePathSegments = (s)=> (typeof s === 'string') ? s.split('/').map(encodeURIComponent).join('/') : '';
    const toThumbUrl = (key, w=320)=> key ? `/thumbs/output/${encodePathSegments(key)}?w=${w}` : '';
    const setTileNumber = (id, val)=>{ const el=document.getElementById(id); if(el) el.textContent = (val ?? '—'); };
    const setTileText = (id, txt)=>{ const el=document.getElementById(id); if(el) el.textContent = (txt ?? '—'); };
    const setMediaTile = (prefix, row)=>{
      const img = document.getElementById('img'+prefix);
      const tTitle = document.getElementById('title'+prefix);
      const tNum = document.getElementById('num'+prefix);
      if(row && row.media_key){
        if(img){ img.src = toThumbUrl(row.media_key, 480); img.alt = row.media_key; }
        if(tTitle){ tTitle.textContent = row.media_key; }
        if(tNum){ tNum.textContent = row.count ?? '—'; }
      } else {
        if(img){ img.removeAttribute('src'); img.alt = 'No data'; }
        if(tTitle){ tTitle.textContent = 'No data'; }
        if(tNum){ tNum.textContent = '—'; }
      }
    };
    const setMs = (id, ms)=>{
      const el = document.getElementById(id);
      if(!el){ return; }
      if(ms==null){ el.textContent='—'; return; }
      // format ms to s with 2 decimals if >= 1000ms
      const n = Number(ms);
      el.textContent = n >= 1000 ? (n/1000).toFixed(2)+'s' : n+'ms';
    };
    const setRate = (id, r)=>{
      const el = document.getElementById(id);
      if(!el){ return; }
      if(r==null){ el.textContent='—'; return; }
      el.textContent = (r*100).toFixed(1)+'%';
    };

    async function loadStats(){
      announcePending();
      const startedAt = Date.now();
      console.info('[ACTION] dashboard_stats_load_start', { ts: startedAt });
      showOverlaySoon();
      const period = (document.getElementById('dashPeriod')?.value)||'7d';
      const filter = (document.getElementById('dashFilter')?.value||'').trim();
      const qs = new URLSearchParams();
      if (period) qs.set('period', period);
      if (filter) qs.set('filter', filter);
      const res = await fetch('/api/admin/stats?'+qs.toString());
      if(!res.ok) throw new Error('Failed to load stats');
  const js = await res.json();
  const totals = js.totals||{}; const leaders = js.leaders||{}; const metrics = js.metrics||{};

  // Totals
      setTileNumber('statUsers', totals.users);
      setTileNumber('statGenerated', totals.generated);
      setTileNumber('statViewed', totals.viewed);
      setTileNumber('statDownloads', totals.downloads);

      // Top user: show big number + name
      if(leaders.topUser){
        setTileNumber('tileTopUserNumber', leaders.topUser.count);
        setTileText('tileTopUserSub', leaders.topUser.name || ('User '+leaders.topUser.id));
      } else {
        setTileNumber('tileTopUserNumber', '—');
        setTileText('tileTopUserSub', 'No data');
      }

      // Media leader tiles with image + number
      setMediaTile('MostViews', leaders.mostViews);
      setMediaTile('MostLikes', leaders.mostLikes);
      setMediaTile('MostSaves', leaders.mostSaves);
      setMediaTile('MostDownloads', leaders.mostDownloads);
      // Generation time metrics
      setMs('avgGenTime', metrics.avgGenMs);
      if(metrics.minGen){
        const row = { media_key: metrics.minGen.media_key, count: metrics.minGen.elapsed_ms };
        const img = document.getElementById('imgFastest'); if(img){ img.src = toThumbUrl(row.media_key, 480); img.alt=row.media_key; }
        const tTitle = document.getElementById('titleFastest'); if(tTitle){ tTitle.textContent = row.media_key; }
        setMs('numFastest', row.count);
      } else {
        setMs('numFastest', null);
      }
      if(metrics.maxGen){
        const row = { media_key: metrics.maxGen.media_key, count: metrics.maxGen.elapsed_ms };
        const img = document.getElementById('imgSlowest'); if(img){ img.src = toThumbUrl(row.media_key, 480); img.alt=row.media_key; }
        const tTitle = document.getElementById('titleSlowest'); if(tTitle){ tTitle.textContent = row.media_key; }
        setMs('numSlowest', row.count);
      } else {
        setMs('numSlowest', null);
      }
      // Conversion rates
      const conv = metrics.conversion||{};
      setRate('rateLike', conv.likeRate);
      setRate('rateSave', conv.saveRate);
      setRate('rateDownload', conv.downloadRate);
      announceComplete();
      hideOverlay();
      console.info('[ACTION] dashboard_stats_load_success', { ms: Date.now()-startedAt });
    }

    function scheduleAutoRefresh(){
      const cb = document.getElementById('dashAutoRefresh');
      let timer;
      const tick = async ()=>{
        try { await loadStats(); } catch(e){ console.error('Dashboard stats failed', e); hideOverlay(); announceError(); console.info('[ACTION] dashboard_stats_load_error', { error: String(e&&e.message||e) }); }
        if (cb?.checked) timer = setTimeout(tick, 10000);
      };
      cb?.addEventListener('change', ()=>{
        if (!cb.checked && timer) { clearTimeout(timer); timer = undefined; }
        if (cb.checked && !timer) { tick(); }
      });
      // initial
      tick();
    }

    // Wire filter & period
    document.getElementById('dashFilter')?.addEventListener('input', ()=>{ loadStats().catch(e=>{ console.error(e); hideOverlay(); announceError(); }); });
    document.getElementById('dashPeriod')?.addEventListener('change', ()=>{ loadStats().catch(e=>{ console.error(e); hideOverlay(); announceError(); }); });
    const manual = document.getElementById('dashRefresh');
    if(manual){
      manual.addEventListener('click', ()=>{
        manual.disabled = true; manual.classList.add('spinning');
        loadStats().catch(e=>{ console.error(e); hideOverlay(); announceError(); }).finally(()=>{ manual.disabled=false; manual.classList.remove('spinning'); });
      });
    }
    scheduleAutoRefresh();
    document.querySelector('.panel-body')?.classList.add('pos-relative');

    // --- Image overlay (reuses pattern from media tab simplified) ---
    const overlayEl = document.getElementById('dashImageOverlay');
    const fullImg = document.getElementById('dashImgFull');
    const metaEl = document.getElementById('dashImgMeta');
    const closeBtn = document.getElementById('dashImgClose');
    function openImageOverlay(src, key){
      if(!overlayEl || !fullImg) return;
      fullImg.src = src;
      fullImg.alt = key || 'Media item';
      if(metaEl) metaEl.textContent = key || src;
      overlayEl.hidden = false;
      overlayEl.setAttribute('aria-hidden','false');
      document.body.classList.add('no-scroll');
      console.info('[ACTION] dashboard_leader_image_open', { key });
    }
    function closeImageOverlay(){
      if(!overlayEl) return;
      overlayEl.hidden = true;
      overlayEl.setAttribute('aria-hidden','true');
      try{ document.body.classList.remove('no-scroll'); }catch{}
      console.info('[ACTION] dashboard_leader_image_close');
    }
    closeBtn?.addEventListener('click', closeImageOverlay);
    overlayEl?.addEventListener('click', (e)=>{ if(e.target === overlayEl) closeImageOverlay(); });
    ['MostViews','MostLikes','MostSaves','MostDownloads','Fastest','Slowest'].forEach(prefix=>{
      const img = document.getElementById('img'+prefix);
      if(!img) return;
      img.addEventListener('click', ()=>{
        const key = img.getAttribute('alt') || '';
        // Use a larger thumb; fallback to existing src
        const base = (img.getAttribute('src')||'').split('?')[0];
        const big = base ? base + '?w=1280' : img.getAttribute('src');
        openImageOverlay(big, key);
      });
    });
  })();
</script>
