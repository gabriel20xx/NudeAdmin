<% layout('partials/layout') %>
<section class="panel">
  <h1 class="panel-title">Media</h1>
  <p class="text-dim">Review and moderate generated media.</p>
  <div class="panel-body" id="mediaPanel">
    <div class="toolbar">
      <input type="text" id="mediaSearch" class="auth-input" placeholder="Search by title or key..." style="min-width:260px;" />
  <input type="text" id="mediaTagsFilter" class="auth-input" placeholder="Tag filter (comma separated)" style="min-width:220px;" />
  <button type="button" id="mediaTagModeToggle" class="btn-ghost" title="Toggle tag match mode (ANY vs ALL)">ANY</button>
      <span class="ui-select-wrapper"><select id="mediaSort" class="ui-select" title="Sort media">
        <option value="created_desc">Newest</option>
        <option value="created_asc">Oldest</option>
        <option value="views_desc">Views ↓</option>
        <option value="views_asc">Views ↑</option>
        <option value="likes_desc">Likes ↓</option>
        <option value="likes_asc">Likes ↑</option>
        <option value="saves_desc">Saves ↓</option>
        <option value="saves_asc">Saves ↑</option>
        <option value="downloads_desc">Downloads ↓</option>
        <option value="downloads_asc">Downloads ↑</option>
      </select></span>
      <span class="ui-select-wrapper"><select id="mediaVisFilter" class="ui-select" title="Filter visibility">
        <option value="all">All</option>
        <option value="visible">Visible</option>
        <option value="hidden">Hidden</option>
      </select></span>
      <button id="mediaRefresh" class="btn-ghost btn-refresh" type="button" title="Refresh (does not clear filters)"><i class="fa fa-rotate-right"></i><span class="hide-xs">Refresh</span></button>
      <div class="actions" style="display:flex; gap:.35rem; align-items:center;">
  <span class="ui-select-wrapper"><select id="mediaBulkAction" class="ui-select">
          <option value="">Bulk Action</option>
          <option value="deactivate">Hide</option>
          <option value="activate">Unhide</option>
          <option value="delete">Delete</option>
          <option value="add_tags">Add Tags</option>
          <option value="remove_tags">Remove Tags</option>
          <option value="replace_tags">Replace Tags</option>
          <option value="rename">Rename Title</option>
  </select></span>
        <input type="text" id="mediaTagsInput" class="auth-input" placeholder="tags (comma)" style="width:180px;display:none;" />
        <input type="text" id="mediaTitleInput" class="auth-input" placeholder="title" style="width:180px;display:none;" />
        <button id="mediaApply" class="btn-accent" disabled>Apply</button>
      </div>
    </div>

    <div id="mediaList" class="media-list" style="margin-top:.75rem; display:flex; flex-direction:column; gap:.5rem;">
      <div class="placeholder">Loading media...</div>
    </div>
    <div id="mediaOverlay" class="refresh-overlay" aria-hidden="true" hidden>
      <div class="loader" role="status" aria-label="Loading"></div>
      <div class="status-text">Loading…</div>
    </div>
    <div id="mediaLive" class="visually-hidden" aria-live="polite" aria-atomic="true"></div>
  </div>
</section>

<script>
(function(){
  // Ensure shared overlay util loaded (in layout include /shared/overlay.js if not already)
  const toast = window.toast || { info:console.log, error:console.error, success:console.log };
  const listRoot = document.getElementById('mediaList');
  const searchInput = document.getElementById('mediaSearch');
  const tagsFilterInput = document.getElementById('mediaTagsFilter');
  const actionSel = document.getElementById('mediaBulkAction');
  const tagsInput = document.getElementById('mediaTagsInput');
  const titleInput = document.getElementById('mediaTitleInput');
  const applyBtn = document.getElementById('mediaApply');
  let term = '', tagFilterRaw = '', sortMode='created_desc', visFilter='all';
  // tagMode persistence (ANY default) stored under adminMediaTagMode
  let tagMode = (localStorage.getItem('adminMediaTagMode')||'any').toLowerCase()==='all' ? 'all' : 'any';
  let lastCounts = {}; // cache counts for sorting without refetch

  const api = async (path, opts={})=>{
    const res = await fetch(path, { headers:{ 'Content-Type':'application/json' }, ...opts });
    const data = await res.json().catch(()=>({}));
    if(!res.ok || data.success===false) throw new Error(data.error||res.statusText);
    return data;
  };
  function escapeHtml(s){ return (s||'').replace(/[&<>\"]+/g, ch=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;' }[ch])); }
  function fmtTime(t){ if(!t) return ''; try { const d=new Date(t); return d.toISOString().replace('T',' ').slice(0,19); } catch { return String(t); } }

  // Overlay controller
  const ov = (window.NCOverlay && window.NCOverlay.createOverlayController) ? window.NCOverlay.createOverlayController({ overlayId:'mediaOverlay', liveId:'mediaLive', showDelay:120, toast }) : null;
  function announcePending(){ ov?.announce('Loading media…'); }
  function announceComplete(count){ ov?.announce(`Loaded ${count} media items at ${new Date().toLocaleTimeString()}`); }

  async function load(){
    announcePending();
    ov?.showSoon();
    listRoot.innerHTML = '<div class="placeholder">Loading media...</div>';
    try{
  const d = await api(`/api/admin/media?search=${encodeURIComponent(term)}&tag=${encodeURIComponent(tagFilterRaw)}&tagMode=${encodeURIComponent(tagMode)}`);
      let media = d.media || [];
      if(term){ const q=term.toLowerCase(); media = media.filter(m=> (m.title||'').toLowerCase().includes(q) || (m.mediaKey||'').toLowerCase().includes(q)); }
  // Tag filter is applied server-side; optional additional client refine (ANY match semantics)
  if(tagFilterRaw){ const want = Array.from(new Set(tagFilterRaw.split(/[ ,]+/).map(s=> s.trim().toLowerCase()).filter(Boolean))); media = media.filter(m=> { const mt=(m.tags||[]).map(t=>t.toLowerCase()); return want.some(w=> mt.includes(w)); }); }
      if(visFilter!=='all'){
        media = media.filter(m=> visFilter==='visible' ? !!m.active : !m.active);
      }
  if(media.length===0){ listRoot.innerHTML = '<div class="placeholder">No media found</div>'; wire(); announceComplete(0); ov?.hide(); return; }

      // Fetch engagement counts in one round-trip
      const keys = media.map(m=> m.mediaKey).filter(Boolean);
  let counts = {}; try { const c = await api('/api/admin/media/engagement-counts', { method:'POST', body: JSON.stringify({ keys }) }); counts = c.counts||{}; lastCounts = counts; } catch { lastCounts = {}; }

  media = applySort(media, counts);
  listRoot.innerHTML = media.map(m=> renderItem(m, counts[m.mediaKey]||{ likes:0, saves:0, views:0, downloads:0 })).join('');
      wire();
      announceComplete(media.length);
    }catch(e){ listRoot.innerHTML = `<div class="error">${escapeHtml(e.message)}</div>`; toast.error(e.message||'Failed to load media'); ov?.announceError?.('Failed to load media'); }
    ov?.hide();
  }

  function renderItem(m, c){
    const thumb = toThumbUrl(m.mediaKey);
    const full = toFullUrl(m.mediaKey);
  const genLabel = m.userId ? (m.generatorUsername || ('user #'+m.userId)) : 'Anonymous';
  const genInfo = `Generated by <strong>${escapeHtml(genLabel)}</strong> on ${escapeHtml(fmtTime(m.createdAt))}`;
  const likeRate = c && c.views ? ((c.likes||0) / (c.views||1) * 100).toFixed(1) : null;
  const likeTitle = `Show likers${likeRate!==null?` (rate: ${likeRate}% of views)`:''}`;
    return `
      <div class="media-item" data-id="${m.id}" data-key="${escapeHtml(m.mediaKey)}" style="display:grid; grid-template-columns: 26px 88px 1fr auto; gap:.65rem; align-items:center; border:1px solid var(--color-border); border-radius:var(--radius-md); padding:.6rem .7rem; background:var(--color-surface);">
        <div class="sel" style="display:flex; align-items:center; justify-content:center;">
          <input type="checkbox" class="mediaRowChk" data-id="${m.id}" aria-label="Select media item ${escapeHtml(m.mediaKey)}" />
        </div>
        <div class="thumb" style="width:88px; height:88px; overflow:hidden; border-radius:var(--radius-sm); background:#111; display:flex; align-items:center; justify-content:center;">
          <img src="${thumb}" alt="thumb" style="max-width:100%; max-height:100%; cursor:pointer;" />
        </div>
  <div class="meta" style="display:grid; grid-template-columns: repeat(6, minmax(0,1fr)); gap:.5rem; text-align:left;">
          <div>
            <div><small class="text-dim">Title</small></div>
            <div style="display:flex; gap:.35rem; align-items:center;">
              <input class="m-title auth-input" type="text" value="${escapeHtml(m.title||'')}" style="width:100%;" />
              <button class="btn-info m-rename" type="button">Rename</button>
            </div>
          </div>
          <div>
            <div><small class="text-dim">Key</small></div>
            <div title="${escapeHtml(m.mediaKey)}" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; max-width:360px;">${escapeHtml(m.mediaKey)}</div>
          </div>
          <div>
            <div><small class="text-dim">Tags</small></div>
            <div class="m-tags-wrap" style="display:flex; flex-wrap:wrap; gap:.35rem; align-items:center;">
              ${(m.tags||[]).map(t=>`<span class="badge" data-tag="${escapeHtml(t)}" title="${escapeHtml(t)}">${escapeHtml(t)} <button type="button" class="tag-remove" aria-label="Remove tag ${escapeHtml(t)}" style="background:none;border:none;color:inherit;cursor:pointer;font-size:.6rem;">×</button></span>`).join('')}
              <input class="m-tags-input auth-input" type="text" placeholder="add tag" style="width:90px;" />
              <button class="btn-info m-tags-add" type="button">Add</button>
              <button class="btn-info m-tags-replace" type="button" title="Replace all tags">Replace</button>
            </div>
          </div>
          <div>
            <div><small class="text-dim">Visibility</small></div>
            <div>${m.active? 'Visible':'Hidden'}</div>
          </div>

          <div>
            <div><small class="text-dim">Generated</small></div>
            <div>${genInfo}</div>
          </div>
          <div>
            <div><small class="text-dim">Views</small></div>
            <div style="display:flex; gap:.35rem; align-items:center; flex-wrap:wrap;">
              <span class="badge blue" title="Total views">${c.views||0}</span>
              ${likeRate!==null?`<span class="badge" title="Like rate">${likeRate}%</span>`:''}
            </div>
          </div>
          <div>
            <div><small class="text-dim">Likes</small></div>
            <div><button class="m-likers" type="button" title="${likeTitle}" style="background:none;border:none;padding:0;cursor:pointer;"><span class="badge green">${c.likes||0}</span></button></div>
          </div>
          <div>
            <div><small class="text-dim">Saves</small></div>
            <div><button class="m-savers" type="button" title="Show savers" style="background:none;border:none;padding:0;cursor:pointer;"><span class="badge">${c.saves||0}</span></button></div>
          </div>
          <div>
            <div><small class="text-dim">Downloads</small></div>
            <div><span class="badge" title="Total downloads">${c.downloads||0}</span></div>
          </div>
          <div>
            <div><small class="text-dim">Created</small></div>
            <div>${fmtTime(m.createdAt)}</div>
          </div>
        </div>
        <div class="actions" style="display:flex; gap:.4rem; flex-direction:column;">
          <a class="btn-ghost" href="${full}" target="_blank" rel="noopener">Open</a>
          <button class="btn-info m-toggle" type="button">${m.active?'Hide':'Unhide'}</button>
          <button class="btn-danger-solid m-delete" type="button">Delete</button>
        </div>
        <div class="media-details" style="grid-column:1/-1; display:none; border-top:1px dashed var(--color-border); padding-top:.5rem;"></div>
      </div>`;
  }

  function wire(){
    // filters
    let t1; searchInput.oninput = ()=>{ clearTimeout(t1); t1=setTimeout(()=>{ term = searchInput.value.trim(); load(); }, 250); };
    let t2; tagsFilterInput.oninput = ()=>{ clearTimeout(t2); t2=setTimeout(()=>{ tagFilterRaw = tagsFilterInput.value.trim(); load(); }, 300); };
    const sortSel = document.getElementById('mediaSort');
    const tagModeBtn = document.getElementById('mediaTagModeToggle');
    if(tagModeBtn){
      function syncTagModeBtn(){ tagModeBtn.textContent = tagMode.toUpperCase(); tagModeBtn.setAttribute('aria-pressed', tagMode==='all'); tagModeBtn.title = `Current tag match mode: ${tagMode==='all'?'ALL (must include every tag)':'ANY (include at least one tag)'} – click to toggle`; }
      syncTagModeBtn();
      tagModeBtn.onclick = ()=>{ tagMode = tagMode==='any'?'all':'any'; localStorage.setItem('adminMediaTagMode', tagMode); syncTagModeBtn(); load(); };
    }
    if(sortSel){
      // restore persisted sort
      const persistedSort = localStorage.getItem('adminMediaSort');
      if(persistedSort && sortSel.querySelector(`option[value="${persistedSort}"]`)){
        sortMode = persistedSort; sortSel.value = persistedSort;
      }
      sortSel.onchange = ()=>{ sortMode = sortSel.value; localStorage.setItem('adminMediaSort', sortMode); load(); };
    }
    const visSel = document.getElementById('mediaVisFilter');
    if(visSel){ visSel.onchange = ()=>{ visFilter = visSel.value; load(); }; }
    // bulk
    function updateBulk(){
      const ids = selectedIds();
      const needsTags = ['add_tags','remove_tags','replace_tags'].includes(actionSel.value);
      const needsTitle = actionSel.value==='rename';
      tagsInput.style.display = needsTags? '' : 'none';
      titleInput.style.display = needsTitle? '' : 'none';
      applyBtn.disabled = ids.length===0 || !actionSel.value || (needsTags && !tagsInput.value.trim()) || (needsTitle && !titleInput.value.trim());
    }
    actionSel.onchange = updateBulk; tagsInput.oninput = updateBulk; titleInput.oninput = updateBulk; updateBulk();
    applyBtn.onclick = async ()=>{
      const ids = selectedIds(); const action = actionSel.value; if(!ids.length||!action) return;
      const body = { action, ids };
      if(['add_tags','remove_tags','replace_tags'].includes(action)) body.tags = tagsInput.value.trim();
      if(action==='rename') body.title = titleInput.value.trim();
      try{ await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify(body) }); toast.success('Bulk action applied'); load(); } catch(e){ toast.error(e.message); }
    };

    // row actions
    listRoot.querySelectorAll('.media-item').forEach(row=>{
      const id = Number(row.dataset.id);
      const key = row.dataset.key;
      const img = row.querySelector('img');
      const details = row.querySelector('.media-details');
      const renameBtn = row.querySelector('.m-rename');
  const tagsWrap = row.querySelector('.m-tags-wrap');
  const tagsAddBtn = row.querySelector('.m-tags-add');
  const tagsReplaceBtn = row.querySelector('.m-tags-replace');
  const tagsInputEl = row.querySelector('.m-tags-input');
      const toggleBtn = row.querySelector('.m-toggle');
      const delBtn = row.querySelector('.m-delete');
      const likersBtn = row.querySelector('.m-likers');
      const saversBtn = row.querySelector('.m-savers');
      const titleInput = row.querySelector('.m-title');
      // Tag operations
      function currentRowTags(){ return Array.from(tagsWrap.querySelectorAll('span.badge[data-tag]')).map(b=> b.dataset.tag); }
      tagsWrap?.addEventListener('click', (e)=>{
        if(e.target.classList.contains('tag-remove')){
          const badge = e.target.closest('span.badge[data-tag]');
          const tg = badge?.dataset.tag; if(!tg) return;
          api('/api/admin/media/actions',{ method:'POST', body: JSON.stringify({ action:'remove_tags', ids:[id], tags: tg }) })
            .then(()=>{ toast.info('Tag removed'); load(); })
            .catch(err=> toast.error(err.message));
        }
      });
      tagsAddBtn.onclick = ()=>{
        const raw = tagsInputEl.value.trim(); if(!raw) return;
        api('/api/admin/media/actions',{ method:'POST', body: JSON.stringify({ action:'add_tags', ids:[id], tags: raw }) })
          .then(()=>{ toast.success('Tags added'); tagsInputEl.value=''; load(); })
          .catch(err=> toast.error(err.message));
      };
      tagsReplaceBtn.onclick = ()=>{
        const raw = tagsInputEl.value.trim();
        api('/api/admin/media/actions',{ method:'POST', body: JSON.stringify({ action:'replace_tags', ids:[id], tags: raw }) })
          .then(()=>{ toast.success('Tags replaced'); tagsInputEl.value=''; load(); })
          .catch(err=> toast.error(err.message));
      };

  img.onclick = ()=> openLightbox(key);
      renameBtn.onclick = async ()=>{ try{ await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify({ action:'rename', ids:[id], title:titleInput.value.trim() }) }); toast.success('Renamed'); }catch(e){ toast.error(e.message);} };
      toggleBtn.onclick = async ()=>{ try{ const action = toggleBtn.textContent.includes('Hide') ? 'deactivate':'activate'; await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify({ action, ids:[id] }) }); toast.success('Visibility updated'); load(); }catch(e){ toast.error(e.message);} };
      delBtn.onclick = async ()=>{ if(!confirm('Delete this media item?')) return; try{ await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify({ action:'delete', ids:[id] }) }); toast.success('Deleted'); load(); }catch(e){ toast.error(e.message);} };

      const showUsers = async (kind)=>{
        if(details.dataset.kind===kind && details.style.display!=='none'){ details.style.display='none'; return; }
        details.innerHTML = '<div class="text-dim">Loading...</div>'; details.style.display='';
        try{
          const d = await api(`/api/admin/media/${kind}?mediaKey=${encodeURIComponent(key)}`); const arr = d.users||[];
          if(!arr.length){ details.innerHTML = `<div class="text-dim">No ${kind} users</div>`; return; }
          details.dataset.kind = kind;
          const list = arr.map(u=> `<li style="margin:.25rem 0;"><a href="/users?search=${encodeURIComponent(u.username||u.email||u.id)}">${escapeHtml(u.username||u.email||('user #'+u.id))}</a></li>`).join('');
          details.innerHTML = `
            <div style="display:flex; justify-content:space-between; align-items:center; gap:.5rem;">
              <strong style="text-transform:capitalize;">${kind}</strong>
              <button type="button" class="btn-ghost" onclick="this.closest('.media-details').style.display='none'">Close</button>
            </div>
            <ul style="list-style:disc; text-align:left; margin:.5rem 1.25rem;">${list}</ul>
          `;
        }catch(e){ details.innerHTML = `<div class="error">${escapeHtml(e.message)}</div>`; }
      };
      likersBtn.onclick = ()=> showUsers('likers');
      saversBtn.onclick = ()=> showUsers('savers');
    });

    // select all wiring
    const selAllId = 'mediaSelectAllGlobal';
    if(!document.getElementById(selAllId)){
      const label = document.createElement('label'); label.style.marginLeft='.5rem'; label.innerHTML = `<input type="checkbox" id="${selAllId}" class="ui-checkbox" /> Select all`;
      document.querySelector('#mediaPanel .toolbar').appendChild(label);
    }
    const allChk = document.getElementById(selAllId);
    allChk.onchange = ()=>{ listRoot.querySelectorAll('.mediaRowChk').forEach(c=> { c.checked = allChk.checked; }); updateBulk(); };
    // shift-click range selection
    let lastCheckedIndex = null;
    listRoot.addEventListener('change', (e)=>{
      if(e.target.classList.contains('mediaRowChk')) {
        const checkboxes = Array.from(listRoot.querySelectorAll('.mediaRowChk'));
        const idx = checkboxes.indexOf(e.target);
        if(e.shiftKey && lastCheckedIndex!=null && lastCheckedIndex!==idx){
          const [start,end] = idx>lastCheckedIndex ? [lastCheckedIndex, idx] : [idx, lastCheckedIndex];
            for(let i=start;i<=end;i++){ checkboxes[i].checked = e.target.checked; }
        }
        lastCheckedIndex = idx;
        updateBulk();
      }
    });
  }

  function selectedIds(){ return Array.from(listRoot.querySelectorAll('.media-item.selected, .mediaRowChk:checked')).map(el=> el.dataset?.id ? Number(el.dataset.id) : Number(el.closest('.media-item').dataset.id)); }
  function applySort(media, counts){
    const c = counts || {};
    const cmpNum = (a,b)=> a===b?0:(a<b?-1:1);
    switch(sortMode){
      case 'created_asc': return [...media].sort((a,b)=> cmpNum(new Date(a.createdAt)-new Date(b.createdAt),0));
      case 'views_desc': return [...media].sort((a,b)=> (c[b.mediaKey]?.views||0) - (c[a.mediaKey]?.views||0));
      case 'views_asc': return [...media].sort((a,b)=> (c[a.mediaKey]?.views||0) - (c[b.mediaKey]?.views||0));
      case 'likes_desc': return [...media].sort((a,b)=> (c[b.mediaKey]?.likes||0) - (c[a.mediaKey]?.likes||0));
      case 'likes_asc': return [...media].sort((a,b)=> (c[a.mediaKey]?.likes||0) - (c[b.mediaKey]?.likes||0));
      case 'saves_desc': return [...media].sort((a,b)=> (c[b.mediaKey]?.saves||0) - (c[a.mediaKey]?.saves||0));
      case 'saves_asc': return [...media].sort((a,b)=> (c[a.mediaKey]?.saves||0) - (c[b.mediaKey]?.saves||0));
  case 'downloads_desc': return [...media].sort((a,b)=> (c[b.mediaKey]?.downloads||0) - (c[a.mediaKey]?.downloads||0));
  case 'downloads_asc': return [...media].sort((a,b)=> (c[a.mediaKey]?.downloads||0) - (c[b.mediaKey]?.downloads||0));
      case 'created_desc':
      default: return [...media].sort((a,b)=> new Date(b.createdAt) - new Date(a.createdAt));
    }
  }
  function encodePathSegments(p){ return String(p||'').split('/').map(encodeURIComponent).join('/'); }
  function toThumbUrl(key){ const rel = encodePathSegments(key); return `/thumbs/output/${rel}?w=200`; }
  function toFullUrl(key){ const rel = encodePathSegments(key); return `/output/${rel}`; }
  function isImageKey(key){ const k = String(key||'').toLowerCase(); return ['.png','.jpg','.jpeg','.webp','.gif','.bmp','.svg'].some(ext=> k.endsWith(ext)); }

  // Lightbox overlay
  function ensureLightbox(){
    if(document.getElementById('lightboxOverlay')) return;
    const el = document.createElement('div');
    el.id = 'lightboxOverlay';
    el.setAttribute('role','dialog');
    el.setAttribute('aria-modal','true');
    el.style.cssText = 'position:fixed; inset:0; background:rgba(0,0,0,0.85); display:none; z-index:9999; align-items:center; justify-content:center; padding:2rem;';
    el.innerHTML = `
      <div class="lb-inner" style="position:relative; max-width:95vw; max-height:90vh;">
        <button type="button" id="lbClose" aria-label="Close" style="position:absolute; top:-12px; right:-12px; background:#000; color:#fff; border:1px solid #444; border-radius:999px; width:36px; height:36px; font-size:20px; cursor:pointer;">×</button>
        <img id="lbImg" alt="preview" style="max-width:95vw; max-height:90vh; display:block; border-radius:8px; box-shadow:0 8px 24px rgba(0,0,0,0.5);" />
      </div>`;
    document.body.appendChild(el);
    el.addEventListener('click', (e)=>{ if(e.target===el) closeLightbox(); });
    document.getElementById('lbClose').addEventListener('click', closeLightbox);
    document.addEventListener('keydown', (e)=>{ if(e.key==='Escape' && el.style.display!=='none') closeLightbox(); });
  }
  function openLightbox(key){
    const full = toFullUrl(key);
    if(!isImageKey(key)) { window.open(full, '_blank'); return; }
    ensureLightbox();
    const el = document.getElementById('lightboxOverlay');
    const img = document.getElementById('lbImg');
    img.src = full;
    el.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }
  function closeLightbox(){
    const el = document.getElementById('lightboxOverlay'); if(!el) return;
    el.style.display = 'none';
    const img = document.getElementById('lbImg'); if(img) img.src='';
    document.body.style.overflow = '';
  }

  const refreshBtn = document.getElementById('mediaRefresh');
  if(refreshBtn){
    refreshBtn.addEventListener('click', ()=>{
      refreshBtn.disabled = true; refreshBtn.classList.add('spinning');
      Promise.resolve(load()).catch(()=>{}).finally(()=>{ refreshBtn.disabled=false; refreshBtn.classList.remove('spinning'); });
    });
  }
  // (Overlay helpers now centralized via NCOverlay controller above)
  // Ensure panel has relative positioning for overlay stacking
  document.getElementById('mediaPanel')?.classList.add('pos-relative');
  load();
})();
</script>
