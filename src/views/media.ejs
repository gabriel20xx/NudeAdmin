<% layout('partials/layout') %>
<section class="panel">
  <h1 class="panel-title">Media</h1>
  <p class="text-dim">Review and moderate generated media.</p>
  <div class="panel-body" id="mediaPanel">
    <div class="toolbar" style="display:flex; gap:.5rem; justify-content:center; align-items:center; flex-wrap:wrap;">
      <input type="text" id="mediaSearch" placeholder="Search by title or key..." style="min-width:260px;" />
      <input type="text" id="mediaCategory" placeholder="Category filter" style="min-width:180px;" />
      <div class="actions" style="display:flex; gap:.35rem; align-items:center;">
        <select id="mediaBulkAction">
          <option value="">Bulk Action</option>
          <option value="deactivate">Hide</option>
          <option value="activate">Unhide</option>
          <option value="delete">Delete</option>
          <option value="set_category">Set Category</option>
          <option value="rename">Rename Title</option>
        </select>
        <input type="text" id="mediaCategoryInput" placeholder="category" style="width:130px;display:none;" />
        <input type="text" id="mediaTitleInput" placeholder="title" style="width:180px;display:none;" />
        <button id="mediaApply" class="btn-accent" disabled>Apply</button>
      </div>
    </div>

    <div id="mediaList" class="media-list" style="margin-top:.75rem; display:flex; flex-direction:column; gap:.5rem;">
      <div class="placeholder">Loading media...</div>
    </div>
  </div>
</section>

<script>
(function(){
  const toast = window.toast || { info:console.log, error:console.error, success:console.log };
  const listRoot = document.getElementById('mediaList');
  const searchInput = document.getElementById('mediaSearch');
  const catFilter = document.getElementById('mediaCategory');
  const actionSel = document.getElementById('mediaBulkAction');
  const catInput = document.getElementById('mediaCategoryInput');
  const titleInput = document.getElementById('mediaTitleInput');
  const applyBtn = document.getElementById('mediaApply');
  let term = '', category = '';

  const api = async (path, opts={})=>{
    const res = await fetch(path, { headers:{ 'Content-Type':'application/json' }, ...opts });
    const data = await res.json().catch(()=>({}));
    if(!res.ok || data.success===false) throw new Error(data.error||res.statusText);
    return data;
  };
  function escapeHtml(s){ return (s||'').replace(/[&<>\"]+/g, ch=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;' }[ch])); }
  function fmtTime(t){ if(!t) return ''; try { const d=new Date(t); return d.toISOString().replace('T',' ').slice(0,19); } catch { return String(t); } }

  async function load(){
    listRoot.innerHTML = '<div class="placeholder">Loading media...</div>';
    try{
      const d = await api(`/api/admin/media?search=${encodeURIComponent(term)}&category=${encodeURIComponent(category)}`);
      let media = d.media || [];
      if(term){ const q=term.toLowerCase(); media = media.filter(m=> (m.title||'').toLowerCase().includes(q) || (m.mediaKey||'').toLowerCase().includes(q)); }
      if(category){ media = media.filter(m=> (m.category||'')===category); }
      if(media.length===0){ listRoot.innerHTML = '<div class="placeholder">No media found</div>'; wire(); return; }

      // Fetch engagement counts in one round-trip
      const keys = media.map(m=> m.mediaKey).filter(Boolean);
      let counts = {}; try { const c = await api('/api/admin/media/engagement-counts', { method:'POST', body: JSON.stringify({ keys }) }); counts = c.counts||{}; } catch {}

      listRoot.innerHTML = media.map(m=> renderItem(m, counts[m.mediaKey]||{ likes:0, saves:0 })).join('');
      wire();
    }catch(e){ listRoot.innerHTML = `<div class="error">${escapeHtml(e.message)}</div>`; }
  }

  function renderItem(m, c){
    const thumb = toThumbUrl(m.mediaKey);
    const full = toFullUrl(m.mediaKey);
  const genLabel = m.userId ? (m.generatorUsername || ('user #'+m.userId)) : 'Anonymous';
  const genInfo = `Generated by <strong>${escapeHtml(genLabel)}</strong> on ${escapeHtml(fmtTime(m.createdAt))}`;
    return `
      <div class="media-item" data-id="${m.id}" data-key="${escapeHtml(m.mediaKey)}" style="display:grid; grid-template-columns: 88px 1fr auto; gap:.65rem; align-items:center; border:1px solid var(--color-border); border-radius:var(--radius-md); padding:.6rem .7rem; background:var(--color-surface);">
        <div class="thumb" style="width:88px; height:88px; overflow:hidden; border-radius:var(--radius-sm); background:#111; display:flex; align-items:center; justify-content:center;">
          <img src="${thumb}" alt="thumb" style="max-width:100%; max-height:100%; cursor:pointer;" />
        </div>
        <div class="meta" style="display:grid; grid-template-columns: repeat(4, minmax(0,1fr)); gap:.5rem; text-align:left;">
          <div>
            <div><small class="text-dim">Title</small></div>
            <div style="display:flex; gap:.35rem; align-items:center;">
              <input class="m-title" type="text" value="${escapeHtml(m.title||'')}" style="width:100%;" />
              <button class="btn-info m-rename" type="button">Rename</button>
            </div>
          </div>
          <div>
            <div><small class="text-dim">Key</small></div>
            <div title="${escapeHtml(m.mediaKey)}" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; max-width:360px;">${escapeHtml(m.mediaKey)}</div>
          </div>
          <div>
            <div><small class="text-dim">Category</small></div>
            <div style="display:flex; gap:.35rem; align-items:center;">
              <input class="m-category" type="text" value="${escapeHtml(m.category||'')}" style="width:100%;" />
              <button class="btn-info m-setcat" type="button">Set</button>
            </div>
          </div>
          <div>
            <div><small class="text-dim">Visibility</small></div>
            <div>${m.active? 'Visible':'Hidden'}</div>
          </div>

          <div>
            <div><small class="text-dim">Generated</small></div>
            <div>${genInfo}</div>
          </div>
          <div>
            <div><small class="text-dim">Likes</small></div>
            <div><button class="linklike m-likers" type="button" title="Show likers">${c.likes||0}</button></div>
          </div>
          <div>
            <div><small class="text-dim">Saves</small></div>
            <div><button class="linklike m-savers" type="button" title="Show savers">${c.saves||0}</button></div>
          </div>
          <div>
            <div><small class="text-dim">Created</small></div>
            <div>${fmtTime(m.createdAt)}</div>
          </div>
        </div>
        <div class="actions" style="display:flex; gap:.4rem; flex-direction:column;">
          <a class="btn-ghost" href="${full}" target="_blank" rel="noopener">Open</a>
          <button class="btn-info m-toggle" type="button">${m.active?'Hide':'Unhide'}</button>
          <button class="btn-danger-solid m-delete" type="button">Delete</button>
        </div>
        <div class="media-details" style="grid-column:1/-1; display:none; border-top:1px dashed var(--color-border); padding-top:.5rem;"></div>
      </div>`;
  }

  function wire(){
    // filters
    let t1; searchInput.oninput = ()=>{ clearTimeout(t1); t1=setTimeout(()=>{ term = searchInput.value.trim(); load(); }, 250); };
    let t2; catFilter.oninput = ()=>{ clearTimeout(t2); t2=setTimeout(()=>{ category = catFilter.value.trim(); load(); }, 250); };
    // bulk
    function updateBulk(){
      const ids = selectedIds();
      const needsCat = actionSel.value==='set_category';
      const needsTitle = actionSel.value==='rename';
      catInput.style.display = needsCat? '' : 'none';
      titleInput.style.display = needsTitle? '' : 'none';
      applyBtn.disabled = ids.length===0 || !actionSel.value || (needsCat && !catInput.value) || (needsTitle && !titleInput.value);
    }
    actionSel.onchange = updateBulk; catInput.oninput = updateBulk; titleInput.oninput = updateBulk; updateBulk();
    applyBtn.onclick = async ()=>{
      const ids = selectedIds(); const action = actionSel.value; if(!ids.length||!action) return;
      const body = { action, ids };
      if(action==='set_category') body.category = catInput.value.trim();
      if(action==='rename') body.title = titleInput.value.trim();
      try{ await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify(body) }); toast.success('Bulk action applied'); load(); } catch(e){ toast.error(e.message); }
    };

    // row actions
    listRoot.querySelectorAll('.media-item').forEach(row=>{
      const id = Number(row.dataset.id);
      const key = row.dataset.key;
      const img = row.querySelector('img');
      const details = row.querySelector('.media-details');
      const renameBtn = row.querySelector('.m-rename');
      const setCatBtn = row.querySelector('.m-setcat');
      const toggleBtn = row.querySelector('.m-toggle');
      const delBtn = row.querySelector('.m-delete');
      const likersBtn = row.querySelector('.m-likers');
      const saversBtn = row.querySelector('.m-savers');
      const titleInput = row.querySelector('.m-title');
      const catInput = row.querySelector('.m-category');

  img.onclick = ()=> openLightbox(key);
      renameBtn.onclick = async ()=>{ try{ await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify({ action:'rename', ids:[id], title:titleInput.value.trim() }) }); toast.success('Renamed'); }catch(e){ toast.error(e.message);} };
      setCatBtn.onclick = async ()=>{ try{ await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify({ action:'set_category', ids:[id], category:catInput.value.trim() }) }); toast.success('Category updated'); }catch(e){ toast.error(e.message);} };
      toggleBtn.onclick = async ()=>{ try{ const action = toggleBtn.textContent.includes('Hide') ? 'deactivate':'activate'; await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify({ action, ids:[id] }) }); toast.success('Visibility updated'); load(); }catch(e){ toast.error(e.message);} };
      delBtn.onclick = async ()=>{ if(!confirm('Delete this media item?')) return; try{ await api('/api/admin/media/actions', { method:'POST', body: JSON.stringify({ action:'delete', ids:[id] }) }); toast.success('Deleted'); load(); }catch(e){ toast.error(e.message);} };

      const showUsers = async (kind)=>{
        if(details.dataset.kind===kind && details.style.display!=='none'){ details.style.display='none'; return; }
        details.innerHTML = '<div class="text-dim">Loading...</div>'; details.style.display='';
        try{
          const d = await api(`/api/admin/media/${kind}?mediaKey=${encodeURIComponent(key)}`); const arr = d.users||[];
          if(!arr.length){ details.innerHTML = `<div class="text-dim">No ${kind} users</div>`; return; }
          details.dataset.kind = kind;
          const list = arr.map(u=> `<li style="margin:.25rem 0;"><a href="/users?search=${encodeURIComponent(u.username||u.email||u.id)}">${escapeHtml(u.username||u.email||('user #'+u.id))}</a></li>`).join('');
          details.innerHTML = `
            <div style="display:flex; justify-content:space-between; align-items:center; gap:.5rem;">
              <strong style="text-transform:capitalize;">${kind}</strong>
              <button type="button" class="btn-ghost" onclick="this.closest('.media-details').style.display='none'">Close</button>
            </div>
            <ul style="list-style:disc; text-align:left; margin:.5rem 1.25rem;">${list}</ul>
          `;
        }catch(e){ details.innerHTML = `<div class="error">${escapeHtml(e.message)}</div>`; }
      };
      likersBtn.onclick = ()=> showUsers('likers');
      saversBtn.onclick = ()=> showUsers('savers');
    });

    // select all wiring
    const selAllId = 'mediaSelectAllGlobal';
    if(!document.getElementById(selAllId)){
      const label = document.createElement('label'); label.style.marginLeft='.5rem'; label.innerHTML = `<input type="checkbox" id="${selAllId}" /> Select all`;
      document.querySelector('#mediaPanel .toolbar').appendChild(label);
    }
    const allChk = document.getElementById(selAllId);
    allChk.onchange = ()=>{ listRoot.querySelectorAll('.mediaRowChk').forEach(c=> c.checked = allChk.checked); };
    listRoot.addEventListener('change', (e)=>{ if(e.target.classList.contains('mediaRowChk')) {/* future per-row select */} });
  }

  function selectedIds(){ return Array.from(listRoot.querySelectorAll('.media-item.selected, .mediaRowChk:checked')).map(el=> el.dataset?.id ? Number(el.dataset.id) : Number(el.closest('.media-item').dataset.id)); }
  function encodePathSegments(p){ return String(p||'').split('/').map(encodeURIComponent).join('/'); }
  function toThumbUrl(key){ const rel = encodePathSegments(key); return `/thumbs/output/${rel}?w=200`; }
  function toFullUrl(key){ const rel = encodePathSegments(key); return `/output/${rel}`; }
  function isImageKey(key){ const k = String(key||'').toLowerCase(); return ['.png','.jpg','.jpeg','.webp','.gif','.bmp','.svg'].some(ext=> k.endsWith(ext)); }

  // Lightbox overlay
  function ensureLightbox(){
    if(document.getElementById('lightboxOverlay')) return;
    const el = document.createElement('div');
    el.id = 'lightboxOverlay';
    el.setAttribute('role','dialog');
    el.setAttribute('aria-modal','true');
    el.style.cssText = 'position:fixed; inset:0; background:rgba(0,0,0,0.85); display:none; z-index:9999; align-items:center; justify-content:center; padding:2rem;';
    el.innerHTML = `
      <div class="lb-inner" style="position:relative; max-width:95vw; max-height:90vh;">
        <button type="button" id="lbClose" aria-label="Close" style="position:absolute; top:-12px; right:-12px; background:#000; color:#fff; border:1px solid #444; border-radius:999px; width:36px; height:36px; font-size:20px; cursor:pointer;">×</button>
        <img id="lbImg" alt="preview" style="max-width:95vw; max-height:90vh; display:block; border-radius:8px; box-shadow:0 8px 24px rgba(0,0,0,0.5);" />
      </div>`;
    document.body.appendChild(el);
    el.addEventListener('click', (e)=>{ if(e.target===el) closeLightbox(); });
    document.getElementById('lbClose').addEventListener('click', closeLightbox);
    document.addEventListener('keydown', (e)=>{ if(e.key==='Escape' && el.style.display!=='none') closeLightbox(); });
  }
  function openLightbox(key){
    const full = toFullUrl(key);
    if(!isImageKey(key)) { window.open(full, '_blank'); return; }
    ensureLightbox();
    const el = document.getElementById('lightboxOverlay');
    const img = document.getElementById('lbImg');
    img.src = full;
    el.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }
  function closeLightbox(){
    const el = document.getElementById('lightboxOverlay'); if(!el) return;
    el.style.display = 'none';
    const img = document.getElementById('lbImg'); if(img) img.src='';
    document.body.style.overflow = '';
  }

  load();
})();
</script>
